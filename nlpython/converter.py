from nlpython.llm import MODEL_TO_API, SUPPORTED_MODELS


class NLPConverter:
    """Class used for converting Natural Language into Python code."""

    _system_message = (
        "You are a natural language to Python converter. You take as input "
        "commands in natural language and convert them into Python code. \n"
        "You must return not only the code generated by the user input but "
        "you must merge the command provided by the user with the code you "
        "generated so far.\n Format your answer as plain code and mark the "
        "beginning of the code with <code> and the end with </code>."
    )

    def __init__(
            self,
            model_name: str = "gpt-3.5-turbo",
            max_tokens: int = 2048,
            temperature: float = 0.7,
    ):
        if model_name not in SUPPORTED_MODELS:
            raise ValueError(
                f"Model {model_name} is not supported. "
                f"Supported models are: {SUPPORTED_MODELS}"
            )
        self._model_name = model_name
        self._llm = MODEL_TO_API[model_name]()
        self._max_tokens = max_tokens
        self._temperature = temperature

    def convert(self, code: str):
        commands = [x.strip() for x in code.split("\n\n") if x.strip()]
        system_message = {"role": "system", "content": self._system_message}
        code = ""
        for i, command in enumerate(commands):
            messages = [system_message]
            if i > 0:
                messages.append({"role": "user", "content": commands[i - 1]})
                messages.append({"role": "assistant", "content": code})
            messages.append({"role": "user", "content": command})
            code = self._llm.run(
                model=self._model_name,
                messages=messages,
                max_tokens=self._max_tokens,
                temperature=self._temperature,
            )
            if "<code>" in code and "</code>" in code:
                code = code.split("<code>")[1].split("</code>")[0]
            else:
                code = (
                    f"Not able to read the following code:\n{code}\n "
                    f"It must be taken into consideration in the following "
                    f"iteration"
                )
        return code
